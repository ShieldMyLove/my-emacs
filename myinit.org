* Init Setting
#+begin_src emacs-lisp
  ;; Increase garbage collection threshold to accelerate startup
  (setq gc-cons-threshold 64000000)

  ;; Change TAB key behavior to insert spaces instead
  (setq-default indent-tabs-mode nil)
  ;; Set number of spaces for c/c++ source file
  (setq c-basic-offset 2)
  ;; For a buffer-local variable, setq can only apply to current buffer,
  ;; while setq-default can apply to all buffers.
  (setq-default tab-width 4)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)

  ;; Prevent emacs from making backup files
  (setq make-backup-files nil)

  ;; Remove trailing whitespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; More powerful automatic adjustments according to whitespace-style
  ;; variable, which may influence leading whitespaces.
  ;; (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; Add a value to 'load-path'
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
#+end_src
* Keybinding
#+begin_src emacs-lisp
  (defun next-lines ()
    (interactive)
    (forward-line 5))

  (defun previous-lines()
    (interactive)
    (forward-line -5))

  (global-set-key (kbd "M-n") 'next-lines)
  (global-set-key (kbd "M-p") 'previous-lines)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src
* Common
#+begin_src emacs-lisp
  ;; Coding mode configurations
  (defun coding-mode()
    ;; Highlight trailing whitespaces and exceeding part
    ;; when lines are longer than whitespace-line-column
    (setq show-trailing-whitespace t)
    ;; Auto-fill when current line is longer than 80 characters
    (setq fill-column 80)
    (setq auto-fill-function 'do-auto-fill)
    (whitespace-mode t))

  (defun add-multiple-hooks (hook-function hooks)
    (mapc (lambda (hook) (add-hook hook hook-function)) hooks))

  (add-multiple-hooks 'coding-mode
    '(sh-mode-hook
      c-mode-hook
      c++-mode-hook
      python-mode-hook
      magit-mode-hook))
#+end_src
* Interface Tweak
#+begin_src emacs-lisp
  ;; Use y-n instead of yes-no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Display column number
  (setq column-number-mode t)

  ;; Ignore ring-bell-function
  (setq ring-bell-function 'ignore)

  ;; Put an newline at end of file if it doesn't exist
  ;; Newline character is regard as the end of each line, and
  ;; it may cause header file including error without it.
  (setq require-final-newline t)

  ;; Highlight cursor line
  (global-hl-line-mode t)

  (setq whitespace-style '(face tabs trailing lines space-before-tab
    indentation empty space-after-tab tab-mark))
#+end_src
* Ibuffer
#+begin_src emacs-lisp
  (require 'ibuffer)

  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; Define buffer groups
  (setq ibuffer-saved-filter-groups
    (quote (("default"
            ("dired" (mode . dired-mode))
            ("emacs" (or
                     (name . "^\\*scratch\\*$")
                     (name . "^\\*Help\\*$")
                     (name . "^\\*Messages\\*$")))
            ("programming" (or
                           (mode . python-mode)
                           (mode . c++-mode)
                           (mode . c-mode)
                           (mode . perl-mode)
                           (mode . python-mode)
                           (mode . emacs-lisp-mode)))
            ("shell" (or
                     (mode . sh-mode)
                     (mode . term-mode)
                     (mode . shell-mode)
                     (mode . eshell-mode)))
            ("edit" (or
                    (mode . org-mode)
                    (mode . markdown-mode)
                    (mode . text-mode)))
            ("git" (or
                   (mode . diff-mode)
                   (name . "^magit.*")
                   (name . ".gitignore")))
            ("gnus" (or
                    (mode . message-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\.bbdb$")
                    (name . "^\\.newsrc-dribble")))))))

  (add-hook 'ibuffer-mode-hook
    (lambda ()
      (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Stop showing groups in which there is no buffer
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Hide the last two summary lines
  (setq ibuffer-display-summary nil)

  ;; Do not ask for confirmation when deleting marked buffers
  (setq ibuffer-expert t)

  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
      ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
      ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
      ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
      (t (format "%8d" (buffer-size)))))

  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
    '((mark modified read-only " "
      (name 18 18 :left :nil)
      " "
      (size-h 9 -1 :right)
      " "
      (mode 16 16 :left :elide)
      " "
      filename-and-process)))
#+end_src
* Package Archives
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
                           ("melpa" . "http://elpa.emacs-china.org/melpa/")
                           ("org" . "http://elpa.emacs-china.org/org/")))

  ;; Disable automatically loading after processing the init file
  (setq package-enable-at-startup nil)

  ;; Avoid automatically adding (package-initialize) to the init file
  (setq package--init-file-ensured t)
#+end_src
* Use-package bootstrap
#+begin_src emacs-lisp
  ;; Install use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Enable use-package
  (eval-when-compile
    (require 'use-package))
#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
#+end_src
* Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind (("C-z" . undo-tree-undo)
           ([remap undo] . undo-tree-redo)
           ("C-x u" . undo-tree-visualize))
    :config
    (global-undo-tree-mode))
#+end_src
* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
* Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . 'ace-window))
    :config
    (setq aw-scope 'frame)
    (setq aw-background nil)
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
* Ivy, Swiper, Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode t))

  (use-package swiper
    :ensure t
    :bind (("C-s" . 'swiper)
           ("C-r" . 'swiper)))

  (use-package counsel
    :ensure t
    :bind (("<f2> u" . 'counsel-unicode-char)
           ("<f2> i" . 'counsel-info-lookup-symbol))
    :config
    (counsel-mode t))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (setq flycheck-clang-language-standard "c++11")
    (global-flycheck-mode))
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (setq company-show-numbers t)
    (global-company-mode))
#+end_src
* C++
** Basic C/C++
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ic\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.yy\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  ;; Syntax highlight for latest C++
  (use-package modern-cpp-font-lock
    :ensure t
    :config
    (modern-c++-font-lock-global-mode t))

  ;; Clang-format
  ;; Function: clang-format-region, clang-format-buffer
  (use-package clang-format
    :ensure t)

  ;; Google c/c++ style
  (use-package google-c-style
    :ensure t
    :config
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent))
#+end_src
** Code navigation
#+begin_src emacs-lisp
  (use-package xcscope
    :ensure t
    :config
    (setq cscope-program "cscope")
    (add-to-list 'cscope-indexer-suffixes "*.ic")
    (add-to-list 'cscope-indexer-suffixes "*.yy")
    (add-to-list 'cscope-indexer-suffixes "*.x")
    (cscope-setup))

  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
      (lambda ()
        (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
          (ggtags-mode 1)))))
#+end_src
** CMake mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src
** Irony
#+begin_src emacs-lisp
  ;; Auto-completition
  (use-package irony
    :ensure t
    :config
    (use-package irony-cdb)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; Company-irony
  (use-package company-irony
    :ensure t
    :requires (company irony)
    :config
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-irony)))

  ;; Flycheck-irony
  ;; May have some strange behaviors, then comment this.
  (use-package flycheck-irony
    :ensure t
    :requires (flycheck irony)
    :config
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))

  ;; Irony-eldoc
  ;; Display documentation about a symbol or function call at point
  ;; in the message buffer
  (use-package irony-eldoc
    :ensure t
    :requires (irony)
    :config
    (add-hook 'irony-mode-hook #'irony-eldoc))
#+end_src
* Avy
#+begin_comment
Quickly jump to the position on screen beginning with specific character.
#+end_comment
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("M-g w" . avy-goto-word-1)))
#+end_src
* Yasnippet
#+begin_comment
A template system for Emacs. It allows you to type an abbreviation and
automatically expand it into function templates.
#+end_comment
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+end_src
* Reveal.js
#+begin_comment
The HTML presentation framework. Presentations can be exported
from Org documents by Org-Reveal
#+end_comment
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t))

  (use-package htmlize
    :ensure t)
#+end_src
* Iedit
#+begin_comment
Mark and edit multiple copies simultaniously.
#+end_comment
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t)
#+end_src
* Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
    (setq web-mode-engines-alist
      '(("php" . "\\.phtml\\'")
        ("blade" . "\\.blade\\.")))
    (setq web-mode-ac-sources-alist
      '(("css" . (ac-source-css-property))
        ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
        ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))

  ;; Adjust indents for web-mode
  (defun web-mode-indent-hook ()
    "Hooks for web mode to adjust indents"
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4))
  (add-hook 'web-mode-hook 'web-mode-indent-hook)

  (add-hook 'html-mode-hook
    (lambda ()
    ;; Default indentation is usually 2 spaces, changing to 4.
    (set (make-local-variable 'sgml-basic-offset) 4)))
#+end_src
* Git
** Magit
#+begin_comment
Git operations in emacs
#+end_comment
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :config
    (setq magit-completing-read-function 'ivy-completing-read))
#+end_src
** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :bind (("C-x C-g" . git-gutter-mode)
           ("C-x v =" . git-gutter:popup-hunk)
           ("C-x p" . git-gutter:previous-hunk)
           ("C-x n" . git-gutter:next-hunk)
           ("C-x v s" . git-gutter:stage-hunk)
           ("C-x v r" . git-gutter:revert-hunk))
    :config
    (setq git-gutter:modified-sign "=")
    (setq git-gutter:added-sign "+")
    (setq git-gutter:deleted-sign "-")
    (set-face-foreground 'git-gutter:modified "yellow")
    (set-face-foreground 'git-gutter:added "green")
    (set-face-foreground 'git-gutter:deleted "red"))
#+end_src
** Git timemachine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+end_src
* Ansi-term
#+begin_src emacs-lisp
  (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
    (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc))) ad-do-it (kill-buffer buffer))
        ad-do-it))

  (ad-activate 'term-sentinel)

  (defvar term-shell "/bin/bash")

  (defadvice ansi-term (before force-bash)
    (interactive (list term-shell)))

  (ad-activate 'ansi-term)

  (defun term-paste (&optional string)
    (interactive)
    (process-send-string (get-buffer-process (current-buffer))
      (if string string (current-kill 0))))

  (defun term-hook ()
    (goto-address-mode)
    (define-key term-raw-map "\C-y" 'term-paste))

  (add-hook 'term-mode-hook 'term-hook)
#+end_src
* Dumb Jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t
    :bind (("M-g j" . dumb-jump-go)
           ("M-g b" . dumb-jump-back)
           ("M-g o" . dumb-jump-go-other-window)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    (setq dumb-jump-selector 'ivy)
    (dumb-jump-mode))
#+end_src
* Origami
#+begin_src emacs-lisp
  (use-package origami
    :ensure t)
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
#+end_src
* Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (use-package smartparens-config)
    (use-package smartparens-html)
    (use-package smartparens-python)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t))
#+end_src
* Text Scale
#+begin_src emacs-lisp
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))
#+end_src
* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
      ("C-x t" . treemacs)))

  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src
* Multiple Cursors
#+begin_src emacs-lisp
  ;; mc/cmds-to-run-once and mc/cmds-to-run-for-all will be cached in
  ;; local file. When multiple cursors run a new command, it will ask about it.
  (use-package multiple-cursors
    :ensure t
    :requires (hydra)
    :config
    (global-set-key (kbd "M-g e")
      (defhydra hydra-multiple-cursors (:color pink)
        "Multiple Cursors"
        ("w" mc/mark-all-words-like-this "All Words" :exit t)
        ("c" mc/mark-all-like-this "All Like This")
        ("n" mc/mark-next-like-this "Next")
        ("M-n" mc/unmark-next-like-this "Unmark Next")
        ("N" mc/skip-to-next-like-this "Skip Next")
        ("p" mc/mark-previous-like-this "Previous")
        ("M-p" mc/unmark-previous-like-this "Unmark Previous")
        ("P" mc/skip-to-previous-like-this "Skip Previous")
        ("$" mc/mark-all-in-region "Prompts")
        ("l" mc/edit-lines "Lines")
        ("b" mc/edit-beginnings-of-lines "Begin of Lines")
        ("e" mc/edit-ends-of-lines "End of Lines")
        ("q" nil "Exit"))))
#+end_src
* Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :ensure ac-js2
    :config
    (add-hook 'js-mode-hook 'js2-minor-mode)
    (add-to-list 'company-backends 'ac-js2-company))

  (use-package js2-refactor
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'js2-mode-hook #'js2-refactor-mode))

  (use-package tern
    :ensure t
    :ensure tern-auto-complete
    :config
    (add-hook 'js-mode-hook (lambda () (tern-mode t)))
    (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

  (use-package simple-httpd
    :ensure t
    :config
    (setq httpd-root "/var/www"))

  (use-package skewer-mode
    :ensure t
    :requires (js2-mode simple-httpd)
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  ;; Org preview HTML mode
  (use-package org-preview-html
    :ensure t
    :bind (("C-c t" . org-preview-html-mode)))

  ;; Load markdown exporter
  (eval-after-load "org"
    '(require 'ox-md nil t))

  (add-hook 'org-mode-hook
    (lambda ()
      (toggle-truncate-lines)
      (org-indent-mode)
      (setq org-log-done 'time)))

  (setq org-todo-keywords
      '((sequence "TODO" "PROGRESS" "|" "DONE" "ABANDONED")))

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c h") 'counsel-org-entity)
#+end_src
* Other Language Modes
#+begin_src emacs-lisp
  ;; Json
  (use-package json-mode
    :ensure t)

  ;; Markdown
  (use-package markdown-mode
    :ensure t
    :config
    ;; Use pandoc to do markdown preview(C-c C-c p).
    (setq markdown-command "/usr/local/bin/pandoc"))
#+end_src
* Other Manually Packages
** Browse Kill Ring
#+begin_src emacs-lisp
  (require 'browse-kill-ring)
  (global-set-key (kbd "M-y") 'browse-kill-ring)
#+end_src
** Solarized Theme
#+begin_src emacs-lisp
  ;; Load solarized theme
  (add-to-list 'custom-theme-load-path
    "~/.emacs.d/site-lisp/emacs-color-theme-solarized")
  (load-theme 'solarized t)
  (add-hook 'after-init-hook
    (lambda ()
      (if (display-graphic-p)
        ;; GUI
        (set-frame-parameter nil 'background-mode 'light)
        ;; Terminal
        (set-terminal-parameter nil 'background-mode 'dark))
      (enable-theme 'solarized)))
#+end_src
** Smart Mode Line
#+begin_src emacs-lisp
  ;; smart-mode-line's dependency
  (use-package rich-minority
    :ensure t)
  (require 'smart-mode-line)
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful)
  (sml/setup)
#+end_src
