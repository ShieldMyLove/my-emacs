* Init Setting
#+begin_src emacs-lisp
  ;; Increase garbage collection threshold to accelerate startup
  (setq gc-cons-threshold 64000000)

  ;; Auto-fill when current line is longer than 80 characters
  (setq-default auto-fill-function 'do-auto-fill)
  (setq-default fill-column 80)

  ;; Change TAB key behavior to insert spaces instead
  (setq-default indent-tabs-mode nil)
  ;; Set number of spaces for c/c++ source file
  (setq c-basic-offset 2)
  ;; For a buffer-local variable, setq can only apply to current buffer,
  ;; while setq-default can apply to all buffers.
  (setq-default tab-width 4)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)

  ;; Prevent emacs from making backup files
  (setq make-backup-files nil)
#+end_src
#+begin_src emacs-lisp
  ;; Load solarized theme
  (add-to-list 'custom-theme-load-path
    "~/.emacs.d/site-lisp/emacs-color-theme-solarized")
  (load-theme 'solarized t)
  (add-hook 'after-init-hook
    (lambda ()
      (if (display-graphic-p)
        ;; GUI
        (set-frame-parameter nil 'background-mode 'light)
        ;; Terminal
        (set-terminal-parameter nil 'background-mode 'dark))
      (enable-theme 'solarized)))

  ;; Remove trailing whitespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; More powerful automatic adjustments according to whitespace-style
  ;; variable, which may influence leading whitespaces.
  ;; (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; Add a value to 'load-path'
  (add-to-list 'load-path "~/.emacs.d/site-lisp")

  ;; Multi-term
  (require 'multi-term)
  (setq multi-term-program "/bin/bash")
#+end_src
* Keybinding
#+begin_src emacs-lisp
  (defun next-lines ()
    (interactive)
    (forward-line 5))

  (defun previous-lines()
    (interactive)
    (forward-line -5))

  (global-set-key (kbd "M-n") 'next-lines)
  (global-set-key (kbd "M-p") 'previous-lines)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src
* Interface Tweak
#+begin_src emacs-lisp
  ;; Use y-n instead of yes-no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Display column number
  (setq column-number-mode t)

  ;; Ignore ring-bell-function
  (setq ring-bell-function 'ignore)

  ;; Put an newline at end of file if it doesn't exist
  ;; Newline character is regard as the end of each line, and
  ;; it may cause header file including error without it.
  (setq require-final-newline t)

  ;; Highlight cursor line
  (global-hl-line-mode t)

  ;; Highlight trailing whitespaces and exceeding part
  ;; when lines are longer than whitespace-line-column
  (setq-default show-trailing-whitespace t)

  ;; Diasble show-trailing-whitespace in minibuffer
  (defun minibuffer-setup ()
    (setq show-trailing-whitespace nil))
  (add-hook 'minibuffer-setup-hook 'minibuffer-setup)

  (setq whitespace-style '(face trailing tabs lines-tail))
  (global-whitespace-mode t)

#+end_src
* Ibuffer
#+begin_src emacs-lisp
  (require 'ibuffer)

  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; Define buffer groups
  (setq ibuffer-saved-filter-groups
    (quote (("default"
            ("dired" (mode . dired-mode))
            ("emacs" (or
                     (name . "^\\*scratch\\*$")
                     (name . "^\\*Messages\\*$")))
            ("programming" (or
                           (mode . python-mode)
                           (mode . c++-mode)
                           (mode . c-mode)
                           (mode . perl-mode)
                           (mode . python-mode)
                           (mode . emacs-lisp-mode)))
            ("shell" (or
                     (mode . shell-mode)
                     (mode . eshell-mode)))
            ("gnus" (or
                    (mode . message-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\.bbdb$")
                    (name . "^\\.newsrc-dribble")))))))

  (add-hook 'ibuffer-mode-hook
    (lambda ()
      (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Stop showing groups in which there is no buffer
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Do not ask for confirmation when deleting marked buffers
  (setq ibuffer-expert t)

  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
      ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
      ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
      ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
      (t (format "%8d" (buffer-size)))))

  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
    '((mark modified read-only " "
      (name 18 18 :left :nil)
      " "
      (size-h 9 -1 :right)
      " "
      (mode 16 16 :left :elide)
      " "
      filename-and-process)))
#+end_src
* Package Archives
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
                           ("melpa" . "http://elpa.emacs-china.org/melpa/")
                           ("org" . "http://elpa.emacs-china.org/org/")))

  ;; Disable automatically loading after processing the init file
  (setq package-enable-at-startup nil)

  ;; Avoid automatically adding (package-initialize) to the init file
  (setq package--init-file-ensured t)
#+end_src
* Use-package bootstrap
#+begin_src emacs-lisp
  ;; Install use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Enable use-package
  (eval-when-compile
    (require 'use-package))
#+end_src
* Undo tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind (("C-z" . undo-tree-undo)
           ([remap undo] . undo-tree-redo)
           ("C-x u" . undo-tree-visualize))
    :config
    (global-undo-tree-mode))
#+end_src
* Which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
* Ace window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (([remap other-window] . 'ace-window))
    :config
    (setq aw-scope 'frame)
    (setq aw-background nil))
#+end_src
* Ivy, Swiper, Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-s" . 'swiper)
           ("<f2> u" . 'counsel-unicode-char)
           ("<f2> i" . 'counsel-info-lookup-symbol))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode t))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (setq flycheck-clang-language-standard "c++11")
    (global-flycheck-mode))
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (setq company-show-numbers t)
    (global-company-mode))
#+end_src
* C++
** Basic C/C++
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ic\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.yy\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  ;; Syntax highlight for latest C++
  (use-package modern-cpp-font-lock
    :ensure t
    :config
    (modern-c++-font-lock-global-mode t))

  ;; Clang-format
  ;; Function: clang-format-region, clang-format-buffer
  (use-package clang-format
    :ensure t)

  ;; Google c/c++ style
  (use-package google-c-style
    :ensure t
    :config
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent))
#+end_src
** Code navigation
#+begin_src emacs-lisp
  (use-package xcscope
    :ensure t
    :config
    (setq cscope-program "gtags-cscope")
    (add-to-list 'cscope-indexer-suffixes "*.ic")
    (add-to-list 'cscope-indexer-suffixes "*.yy")
    (add-to-list 'cscope-indexer-suffixes "*.x")
    (cscope-setup))

  (use-package ggtags
    :ensure t
    :config (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1)))))
#+end_src
** CMake mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src
** Irony
#+begin_src emacs-lisp
  ;; Auto-completition
  (use-package irony
    :ensure t
    :config
    (use-package irony-cdb)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; Company-irony
  (use-package company-irony
    :ensure t
    :requires (company irony)
    :config
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-irony)))

  ;; Flycheck-irony
  (use-package flycheck-irony
    :ensure t
    :requires (flycheck irony)
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

  ;; Irony-eldoc
  (use-package irony-eldoc
    :ensure t
    :requires (irony)
    :config
    (add-hook 'irony-mode-hook #'irony-eldoc))
#+end_src
* Avy
#+begin_comment
Quickly jump to the position on screen beginning with specific character.
#+end_comment
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("M-g w" . avy-goto-word-1)))
#+end_src
* Other language modes
#+begin_src emacs-lisp
  ;; Json
  (use-package json-mode
    :ensure t)

  ;; Markdown
  (use-package markdown-mode
    :ensure t)
#+end_src
